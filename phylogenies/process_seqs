#!/bin/bash
#
# Process fasta files for phylogeny generation
#
# MDS 11/15/2019
# 

input_prefix=${1/.fasta/}
echo $input_prefix

replace_fasta_header_with_organism ${input_prefix}.fasta  | sed s/\.[0-9]\:.*// > ${input_prefix}_renamed.fasta
cd-hit -d 0 -M 0 -c 0.95 -i ${input_prefix}_renamed.fasta -o ${input_prefix}_renamed_cdhit95.fasta
mafft --auto ${input_prefix}_renamed_cdhit95.fasta > ${input_prefix}_renamed_cdhit95_mafft.fasta
trimal -automated1 -in ${input_prefix}_renamed_cdhit95_mafft.fasta -out ${input_prefix}_renamed_cdhit95_mafft_trimal.fasta



#     ------------------------------------------------------------------------------
#       MAFFT v7.407 (2018/Jul/23)
#       https://mafft.cbrc.jp/alignment/software/
#       MBE 30:772-780 (2013), NAR 30:3059-3066 (2002)
#     ------------------------------------------------------------------------------
#     High speed:
#       % mafft in > out
#       % mafft --retree 1 in > out (fast)
#     
#     High accuracy (for <~200 sequences x <~2,000 aa/nt):
#       % mafft --maxiterate 1000 --localpair  in > out (% linsi in > out is also ok)
#       % mafft --maxiterate 1000 --genafpair  in > out (% einsi in > out)
#       % mafft --maxiterate 1000 --globalpair in > out (% ginsi in > out)
#     
#     If unsure which option to use:
#       % mafft --auto in > out
#     
#     --op # :         Gap opening penalty, default: 1.53
#     --ep # :         Offset (works like gap extension penalty), default: 0.0
#     --maxiterate # : Maximum number of iterative refinement, default: 0
#     --clustalout :   Output: clustal format, default: fasta
#     --reorder :      Outorder: aligned, default: input order
#     --quiet :        Do not report progress
#     --thread # :     Number of threads (if unsure, --thread -1)



#     trimAl v1.4.rev15 build[2013-12-17]. 2009-2013. Salvador Capella-Gutierrez and Toni Gabald√≥n.
#     
#     trimAl webpage: http://trimal.cgenomics.org
#     
#     This program is free software: you can redistribute it and/or modify 
#     it under the terms of the GNU General Public License as published by 
#     the Free Software Foundation, the last available version.
#     
#     Please cite:
#     		trimAl: a tool for automated alignment trimming in large-scale phylogenetic analyses.
#     		Salvador Capella-Gutierrez; Jose M. Silla-Martinez; Toni Gabaldon.
#     		Bioinformatics 2009, 25:1972-1973.
#     
#     Basic usage
#     	trimal -in <inputfile> -out <outputfile> -(other options).
#     
#     Common options (for a complete list please see the User Guide or visit http://trimal.cgenomics.org):
#     
#         -h                       Print this information and show some examples.
#         --version                Print the trimAl version.
#     
#         -in <inputfile>          Input file in several formats (clustal, fasta, NBRF/PIR, nexus, phylip3.2, phylip).
#     
#         -compareset <inputfile>  Input list of paths for the files containing the alignments to compare.
#         -forceselect <inputfile> Force selection of the given input file in the files comparison method.
#     
#         -backtrans <inputfile>   Use a Coding Sequences file to get a backtranslation for a given AA alignment
#         -ignorestopcodon         Ignore stop codons in the input coding sequences
#         -splitbystopcodon        Split input coding sequences up to first stop codon appearance
#     
#         -matrix <inpufile>       Input file for user-defined similarity matrix (default is Blosum62).
#     
#         -out <outputfile>        Output alignment in the same input format (default stdout). (default input format)
#         -htmlout <outputfile>    Get a summary of trimal's work in an HTML file.
#     
#         -keepheader              Keep original sequence header including non-alphanumeric characters.
#                                  Only available for input FASTA format files. (future versions will extend this feature)
#     
#         -nbrf                    Output file in NBRF/PIR format
#         -mega                    Output file in MEGA format
#         -nexus                   Output file in NEXUS format
#         -clustal                 Output file in CLUSTAL format
#     
#         -fasta                   Output file in FASTA format
#         -fasta_m10               Output file in FASTA format. Sequences name length up to 10 characters.
#     
#         -phylip                  Output file in PHYLIP/PHYLIP4 format
#         -phylip_m10              Output file in PHYLIP/PHYLIP4 format. Sequences name length up to 10 characters.
#         -phylip_paml             Output file in PHYLIP format compatible with PAML
#         -phylip_paml_m10         Output file in PHYLIP format compatible with PAML. Sequences name length up to 10 characters.
#         -phylip3.2               Output file in PHYLIP3.2 format
#         -phylip3.2_m10           Output file in PHYLIP3.2 format. Sequences name length up to 10 characters.
#     
#         -complementary           Get the complementary alignment.
#         -colnumbering            Get the relationship between the columns in the old and new alignment.
#     
#         -selectcols { n,l,m-k }  Selection of columns to be removed from the alignment. Range: [0 - (Number of Columns - 1)]. (see User Guide).
#         -selectseqs { n,l,m-k }  Selection of sequences to be removed from the alignment. Range: [0 - (Number of Sequences - 1)]. (see User Guide).
#     
#         -gt -gapthreshold <n>    1 - (fraction of sequences with a gap allowed). Range: [0 - 1]
#         -st -simthreshold <n>    Minimum average similarity allowed. Range: [0 - 1]
#         -ct -conthreshold <n>    Minimum consistency value allowed.Range: [0 - 1]
#         -cons <n>                Minimum percentage of the positions in the original alignment to conserve. Range: [0 - 100]
#     
#         -nogaps                  Remove all positions with gaps in the alignment.
#         -noallgaps               Remove columns composed only by gaps.
#         -keepseqs                Keep sequences even if they are composed only by gaps.
#     
#         -gappyout                Use automated selection on "gappyout" mode. This method only uses information based on gaps' distribution. (see User Guide).
#         -strict                  Use automated selection on "strict" mode. (see User Guide).
#         -strictplus              Use automated selection on "strictplus" mode. (see User Guide).
#                                  (Optimized for Neighbour Joining phylogenetic tree reconstruction).
#     
#         -automated1              Use a heuristic selection of the automatic method based on similarity statistics. (see User Guide). (Optimized for Maximum Likelihood phylogenetic tree reconstruction).
#     
#         -terminalonly            Only columns out of internal boundaries (first and last column without gaps) are 
#                                  candidated to be trimmed depending on the applied method
#         -block <n>               Minimum column block size to be kept in the trimmed alignment. Available with manual and automatic (gappyout) methods
#     
#         -resoverlap              Minimum overlap of a positions with other positions in the column to be considered a "good position". Range: [0 - 1]. (see User Guide).
#         -seqoverlap              Minimum percentage of "good positions" that a sequence must have in order to be conserved. Range: [0 - 100](see User Guide).
#     
#         -clusters <n>            Get the most Nth representatives sequences from a given alignment. Range: [1 - (Number of sequences)]
#         -maxidentity <n>         Get the representatives sequences for a given identity threshold. Range: [0 - 1].
#     
#         -w <n>                   (half) Window size, score of position i is the average of the window (i - n) to (i + n).
#         -gw <n>                  (half) Window size only applies to statistics/methods based on Gaps.
#         -sw <n>                  (half) Window size only applies to statistics/methods based on Similarity.
#         -cw <n>                  (half) Window size only applies to statistics/methods based on Consistency.
#     
#         -sgc                     Print gap scores for each column in the input alignment.
#         -sgt                     Print accumulated gap scores for the input alignment.
#         -ssc                     Print similarity scores for each column in the input alignment.
#         -sst                     Print accumulated similarity scores for the input alignment.
#         -sfc                     Print sum-of-pairs scores for each column from the selected alignment
#         -sft                     Print accumulated sum-of-pairs scores for the selected alignment
#         -sident                  Print identity scores for all sequences in the input alignment. (see User Guide).
#     
#     Some Examples:
#     
#     1) Removes all positions in the alignment with gaps in 10% or more of
#        the sequences, unless this leaves less than 60% of original alignment. 
#        In such case, print the 60% best (with less gaps) positions.
#     
#        trimal -in <inputfile> -out <outputfile> -gt 0.9 -cons 60
#     
#     2) As above but, the gap score is averaged over a window starting
#        3 positions before and ending 3 positions after each column.
#     
#        trimal -in <inputfile> -out <outputfile> -gt 0.9 -cons 60 -w 3
#     
#     3) Use an automatic method to decide optimal thresholds, based in the gap scores
#        from input alignment. (see User Guide for details).
#     
#        trimal -in <inputfile> -out <outputfile> -gappyout
#     
#     4) Use automatic methods to decide optimal thresholds, based on the combination 
#        of gap and similarity scores. (see User Guide for details).
#     
#        trimal -in <inputfile> -out <outputfile> -strictplus
#     
#     5) Use an heuristic to decide the optimal method for trimming the alignment. 
#        (see User Guide for details).
#     
#        trimal -in <inputfile> -out <outputfile> -automated1
#     
#     6) Use residues and sequences overlap thresholds to delete some sequences from the 
#        alignemnt. (see User Guide for details).
#     
#        trimal -in <inputfile> -out <outputfile> -resoverlap 0.8 -seqoverlap 75
#     
#     7) Selection of columns to be deleted from the alignment. The selection can 
#        be a column number or a column number interval. Start from 0
#     
#        trimal -in <inputfile> -out <outputfile> -selectcols { 0,2,3,10,45-60,68,70-78 }
#     
#     8) Get the complementary alignment from the alignment previously trimmed.
#     
#        trimal -in <inputfile> -out <outputfile> -selectcols { 0,2,3,10,45-60,68,70-78 } -complementary
#     
#     9) Selection of sequences to be deleted from the alignment. Start in 0
#     
#        trimal -in <inputfile> -out <outputfile> -selectseqs { 2,4,8-12 } 
#     
#     10) Select the 5 most representative sequences from the alignment
#     
#        trimal -in <inputfile> -out <outputfile> -clusters 5 
#     
