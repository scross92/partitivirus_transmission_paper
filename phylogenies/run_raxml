#!/bin/bash
#
# MDS 11/15/2019

in=$1
threads=6
model=LG+I+G4

# all-in-one way 200 bs
# raxml-ng --msa $in --model RTREV+I+G4 --bs-trees 200 --all --tree pars{10} --threads $threads


# do it as 3-step process
# see: https://github.com/amkozlov/raxml-ng/wiki/Tutorial#bootstrapping

# infer tree
raxml-ng --msa $in --model $model --threads $threads --prefix ${in}.ml_tree 

# do boostrapping
raxml-ng --bootstrap --msa $in --model $model --threads $threads --prefix ${in}

# calculate support values 
raxml-ng --support --tree ${in}.ml_tree.raxml.bestTree --bs-trees ${in}.raxml.bootstraps --threads $threads


#       RAxML-NG v. 0.9.0 released on 20.05.2019 by The Exelixis Lab.
#       Developed by: Alexey M. Kozlov and Alexandros Stamatakis.
#       Contributors: Diego Darriba, Tomas Flouri, Benoit Morel, Sarah Lutteropp, Ben Bettisworth.
#       Latest version: https://github.com/amkozlov/raxml-ng
#       Questions/problems/suggestions? Please visit: https://groups.google.com/forum/#!forum/raxml
#       
#       Usage: raxml-ng [OPTIONS]
#       
#       Commands (mutually exclusive):
#         --help                                     display help information
#         --version                                  display version information
#         --evaluate                                 evaluate the likelihood of a tree (with model+brlen optimization)
#         --search                                   ML tree search (default: 10 parsimony + 10 random starting trees)
#         --bootstrap                                bootstrapping (default: use bootstopping to auto-detect #replicates)
#         --all                                      all-in-one (ML search + bootstrapping)
#         --support                                  compute bipartition support for a given reference tree (e.g., best ML tree)
#                                                    and a set of replicate trees (e.g., from a bootstrap analysis)
#         --bsconverge                               test for bootstrapping convergence using autoMRE criterion
#         --bsmsa                                    generate bootstrap replicate MSAs
#         --terrace                                  check whether a tree lies on a phylogenetic terrace 
#         --check                                    check alignment correctness and remove empty columns/rows
#         --parse                                    parse alignment, compress patterns and create binary MSA file
#         --start                                    generate parsimony/random starting trees and exit
#         --rfdist                                   compute pair-wise Robinson-Foulds (RF) distances between trees
#         --consense [ STRICT | MR | MR<n> | MRE ]   build strict, majority-rule (MR) or extended MR (MRE) consensus tree (default: MR)
#                                                    eg: --consense MR75 --tree bsrep.nw
#         --ancestral                                ancestral state reconstruction at all inner nodes
#       
#       Command shortcuts (mutually exclusive):
#         --search1                                  Alias for: --search --tree rand{1}
#         --loglh                                    Alias for: --evaluate --opt-model off --opt-branches off --nofiles --log result
#         --rf                                       Alias for: --rfdist --nofiles --log result
#       
#       Input and output options:
#         --tree            rand{N} | pars{N} | FILE starting tree: rand(om), pars(imony) or user-specified (newick file)
#                                                    N = number of trees (default: rand{10},pars{10})
#         --msa             FILE                     alignment file
#         --msa-format      VALUE                    alignment file format: FASTA, PHYLIP, CATG or AUTO-detect (default)
#         --data-type       VALUE                    data type: DNA, AA, BIN(ary) or AUTO-detect (default)
#         --tree-constraint FILE                     constraint tree
#         --prefix          STRING                   prefix for output files (default: MSA file name)
#         --log             VALUE                    log verbosity: ERROR,WARNING,RESULT,INFO,PROGRESS,DEBUG (default: PROGRESS)
#         --redo                                     overwrite existing result files and ignore checkpoints (default: OFF)
#         --nofiles                                  do not create any output files, print results to the terminal only
#         --precision       VALUE                    number of decimal places to print (default: 6)
#         --outgroup        o1,o2,..,oN              comma-separated list of outgroup taxon names (it's just a drawing option!)
#       
#       General options:
#         --seed         VALUE                       seed for pseudo-random number generator (default: current time)
#         --pat-comp     on | off                    alignment pattern compression (default: ON)
#         --tip-inner    on | off                    tip-inner case optimization (default: OFF)
#         --site-repeats on | off                    use site repeats optimization, 10%-60% faster than tip-inner (default: ON)
#         --threads      VALUE                       number of parallel threads to use (default: 64)
#         --simd         none | sse3 | avx | avx2    vector instruction set to use (default: auto-detect).
#         --rate-scalers on | off                    use individual CLV scalers for each rate category (default: ON for >2000 taxa)
#         --force        [ <CHECKS> ]                disable safety checks (please think twice!)
#       
#       Model options:
#         --model        <name>+G[n]+<Freqs> | FILE  model specification OR partition file
#         --brlen        linked | scaled | unlinked  branch length linkage between partitions (default: scaled)
#         --blmin        VALUE                       minimum branch length (default: 1e-6)
#         --blmax        VALUE                       maximum branch length (default: 100)
#         --blopt        nr_fast    | nr_safe        branch length optimization method (default: nr_fast)
#                        nr_oldfast | nr_oldsafe     
#         --opt-model    on | off                    ML optimization of all model parameters (default: ON)
#         --opt-branches on | off                    ML optimization of all branch lengths (default: ON)
#         --prob-msa     on | off                    use probabilistic alignment (works with CATG and VCF)
#         --lh-epsilon   VALUE                       log-likelihood epsilon for optimization/tree search (default: 0.1)
#       
#       Topology search options:
#         --spr-radius   VALUE                       SPR re-insertion radius for fast iterations (default: AUTO)
#         --spr-cutoff   VALUE | off                 relative LH cutoff for descending into subtrees (default: 1.0)
#       
#       Bootstrapping options:
#         --bs-trees     VALUE                       number of bootstraps replicates
#         --bs-trees     autoMRE{N}                  use MRE-based bootstrap convergence criterion, up to N replicates (default: 1000)
#         --bs-trees     FILE                        Newick file containing set of bootstrap replicate trees (with --support)
#         --bs-cutoff    VALUE                       cutoff threshold for the MRE-based bootstopping criteria (default: 0.03)
#         --bs-metric    fbp | tbe                   branch support metric: fbp = Felsenstein bootstrap (default), tbe = transfer distance
#       
#       EXAMPLES:
#         1. Perform tree inference on DNA alignment 
#            (10 random + 10 parsimony starting trees, general time-reversible model, ML estimate of substitution rates and
#             nucleotide frequencies, discrete GAMMA model of rate heterogeneity with 4 categories):
#       
#            ./raxml-ng --msa testDNA.fa --model GTR+G
#       
#       
#         2. Perform an all-in-one analysis (ML tree search + non-parametric bootstrap) 
#            (10 randomized parsimony starting trees, fixed empirical substitution matrix (LG),
#             empirical aminoacid frequencies from alignment, 8 discrete GAMMA categories,
#             200 bootstrap replicates):
#       
#            ./raxml-ng --all --msa testAA.fa --model LG+G8+F --tree pars{10} --bs-trees 200
#       
#       
#         3. Optimize branch lengths and free model parameters on a fixed topology
#            (using multiple partitions with proportional branch lengths)
#       
#            ./raxml-ng --evaluate --msa testAA.fa --model partitions.txt --tree test.tree --brlen scaled
#       
